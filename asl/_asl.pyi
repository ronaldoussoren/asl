import typing
import typing_extensions

class aslmsg:
    def __new__(self, type: int) -> "aslmsg": ...
    def keys(self) -> typing.Iterable[str]: ...
    def asdict(self) -> typing.Dict[str, str]: ...
    def set_query(self, key: str, value: str, operation: int) -> None: ...
    def __getitem__(self, key: str) -> str: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __delitem__(self, key: str) -> None: ...

class aslresponse:
    def __iter__(self) -> "aslresponse": ...
    def __next__(self) -> aslmsg: ...

class aslclient:
    def __new__(
        self, ident: typing.Optional[str], facility: str, options: int
    ) -> "aslclient": ...
    def add_log_file(self, fd: int): ...
    def remove_log_file(self, fd: int): ...
    def set_filter(self, filter: int): ...
    def log(self, msg: typing.Optional[aslmsg], level: int, text: str): ...
    def send(self, msg: typing.Optional[aslmsg]): ...
    def search(self, msg: typing.Optional[aslmsg]): ...
    def log_descriptor(
        self, msg: typing.Optional[aslmsg], level: int, fd: int, fd_type: int
    ): ...
    def close(self) -> None: ...
    def __enter__(self) -> aslclient:
        return self
    def __exit__(self, type, value, tb) -> typing_extensions.Literal[False]: ...

def log_auxiliary_location(
    msg: aslmsg, title: str, uti: typing.Optional[str], url: str
) -> None: ...
def create_auxiliary_file(
    msg: aslmsg, title: str, uti: typing.Optional[str]
) -> int: ...
def close_auxiliary_file(fd: int) -> None: ...
def open_from_file(
    fd: int, ident: typing.Optional[str], facility: str
) -> aslclient: ...
